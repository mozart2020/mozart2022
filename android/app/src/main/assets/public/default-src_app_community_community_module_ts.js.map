{"version":3,"file":"default-src_app_community_community_module_ts.js","mappings":"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","sources":["./src/app/community/add-connection-modal/add-connection-modal.page.ts","./src/app/community/community-routing.module.ts","./src/app/community/community.module.ts","./src/app/community/community.page.ts","./src/app/services/user.service.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { ModalController, } from '@ionic/angular';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-add-connection-modal',\r\n  templateUrl: './add-connection-modal.page.html',\r\n  styleUrls: ['./add-connection-modal.page.scss'],\r\n})\r\nexport class AddConnectionModalPage implements OnInit {\r\n  @Input() friendIds: any;\r\n  notConnectedUsers=[];\r\n  selectedUserId: string = '';\r\n  selectedUserDisplayedString: string = '';\r\n\r\n  constructor(\r\n    private userService: UserService, \r\n    private modalCtrl: ModalController\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    //all users - friends excluded\r\n    this.userService.getUsersExcludedByUserIds(this.friendIds).subscribe(res => {\r\n      this.notConnectedUsers = res;\r\n    })\r\n  }\r\n  close() {\r\n    this.modalCtrl.dismiss();\r\n  }\r\n  selectUser() {\r\n   this.modalCtrl.dismiss({\r\n      user: { id: this.selectedUserId }\r\n    });\r\n  }\r\n  selectUserName(userName, userEmail) {\r\n    console.log('user name : ', userName, 'user email: ', userEmail);\r\n    this.selectedUserDisplayedString = userName;\r\n    if(this.selectedUserDisplayedString == '') {\r\n      this.selectedUserDisplayedString = userEmail;\r\n    }\r\n  }\r\n  userChange(event) {\r\n    console.log(\"userChange test\", event.detail.value);\r\n    this.selectedUserId = event.detail.value;\r\n  }\r\n \r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CommunityPage } from './community.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CommunityPage\r\n  },\r\n  {\r\n    path: 'profile',\r\n    loadChildren: () => import('./profile/profile.module').then( m => m.ProfilePageModule)\r\n  },\r\n  {\r\n    path: 'add-connection-modal',\r\n    loadChildren: () => import('./add-connection-modal/add-connection-modal.module').then( m => m.AddConnectionModalPageModule)\r\n  },\r\n  {\r\n    path: 'friend-detail/:friendId',\r\n    loadChildren: () => import('./friend-detail/friend-detail.module').then( m => m.FriendDetailPageModule)\r\n  },\r\n  {\r\n    path: 'group-detail/:groupId',\r\n    loadChildren: () => import('./group-detail/group-detail.module').then( m => m.GroupDetailPageModule)\r\n  },\r\n  {\r\n    path: 'chat/:id',\r\n    loadChildren: () => import('./chat/chat.module').then( m => m.ChatPageModule)\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CommunityPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { CommunityPageRoutingModule } from './community-routing.module';\r\n\r\nimport { CommunityPage } from './community.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    CommunityPageRoutingModule\r\n  ],\r\n  declarations: [CommunityPage]\r\n})\r\nexport class CommunityPageModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { IonRouterOutlet, ModalController } from '@ionic/angular';\r\nimport { AddConnectionModalPage } from './add-connection-modal/add-connection-modal.page';\r\nimport { UserService } from '../services/user.service';\r\nimport { AuthService } from '../services/auth.service';\r\n//import { NotificationsService } from '../services/notifications.service';\r\nimport { Auth, onAuthStateChanged } from '@angular/fire/auth';\r\n\r\n\r\n@Component({\r\n  selector: 'app-community',\r\n  templateUrl: './community.page.html',\r\n  styleUrls: ['./community.page.scss'],\r\n})\r\nexport class CommunityPage implements OnInit {\r\n  currentUserEmail: string;\r\n  currentUserImage: string;\r\n  friendIds = [];\r\n  friends = [];\r\n  groups = [];  \r\n\r\n  allSelected = true;\r\n  friendsSelected = false;\r\n  groupsSelected = false;\r\n  receivedRequestId = ''; \r\n  receivedRequestImage = '';\r\n  receivedRequestEmail = '';\r\n  sentRequestId = '';\r\n  sentRequestEmail = '';\r\n  sentRequestImage = '';\r\n  subscriptions = new Subscription();\r\n  logout$: Subject<boolean> = new Subject<boolean>();\r\n\r\n  \r\n\r\n  constructor(\r\n    private modalCtrl: ModalController,\r\n    private routerOutlet: IonRouterOutlet, \r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    //private notifications: NotificationsService,\r\n    private firebaseAuth: Auth\r\n  ) {\r\n    onAuthStateChanged(this.firebaseAuth, user => {\r\n      if (!user) {\r\n        this.logout$.next(true);\r\n      }\r\n    })\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.authService.getCurrentUser().subscribe(res => {\r\n      this.currentUserImage = res.profileImage;\r\n      this.currentUserEmail = res.email;\r\n      if(res.receivedConnectionRequests !== undefined) {\r\n        this.receivedRequestId = res.receivedConnectionRequests;\r\n      }\r\n      if(res.sentConnectionRequests !== undefined) {\r\n        this.sentRequestId = res.sentConnectionRequests;\r\n      }\r\n      //checkt, ob Freundschaftsanfragen vorliegen:\r\n      if (this.receivedRequestId !== '') { //wenn ja, werden die Daten geholt:\r\n        this.userService.getUserById(this.receivedRequestId).subscribe(res => { //!!!später mit switchMap um !!!\r\n          this.receivedRequestImage = res.profileImage;\r\n          this.receivedRequestEmail = res.email;\r\n        })\r\n      }\r\n     if (this.sentRequestId !== '') {\r\n        this.userService.getUserById(this.sentRequestId).subscribe (res => {\r\n          this.sentRequestEmail = res.email;\r\n          this.sentRequestImage = res.profileImage;\r\n        })\r\n      }\r\n    });\r\n    ////getting friends via conections\r\n    this.getFriends(); //FÜHRT DIE FUNKTION AUS IRGENDEINEM GRUND ZWEI MAL AUS\r\n    /////                 SIEHE KONSOLE\r\n  }\r\n//getting friends via connections:\r\ngetFriends() {\r\n  const currentUserId = this.authService.getCurrentUserId();\r\n  this.userService.getCurrentUserConnections().subscribe(res => { //lädt alle connections des current users\r\n    const test = res.forEach(value => { //geht durch alle geladenen connections durch\r\n      if (value.groupName == '') {      //filtert alle groups weg, friendships bleiben übrig\r\n        const users = value.users;      //holt sich die user ids als Array\r\n        users.forEach(id => {\r\n          this.friendIds.push(id);\r\n          console.log('current value of connectionIds: ', this.friendIds);\r\n        });\r\n      }\r\n    });\r\n    this.userService.getUsersByUserIds(this.friendIds).subscribe(res => {\r\n      this.friends = res;\r\n      console.log('friends: ', res); //CHECKEN WIE MAN DAS ASYNCHRON HINKRIEGT\r\n    });\r\n  })\r\n}\r\ngetNonFriends() {\r\n  \r\n}\r\n\r\n  //toggle view: all, friends, groups\r\n  selectAll() {\r\n    if (this.allSelected == false) {\r\n      this.allSelected = true;\r\n      this.friendsSelected = false;\r\n      this.groupsSelected = false;\r\n    }\r\n    console.log (this.allSelected, this.friendsSelected, this.groupsSelected);\r\n  }\r\n  selectFriends() {\r\n    if (this.friendsSelected == false) {\r\n      this.friendsSelected = true;\r\n      this.allSelected = false;\r\n      this.groupsSelected = false;     \r\n    } \r\n    console.log (this.allSelected, this.friendsSelected, this.groupsSelected);\r\n  }\r\n  selectGroups() {\r\n    if (this.groupsSelected == false) {\r\n      this.groupsSelected = true;\r\n      this.friendsSelected = false;\r\n      this.allSelected = false;\r\n    }\r\n    console.log (this.allSelected, this.friendsSelected, this.groupsSelected);\r\n  }\r\n  //Vorhandene User zum Senden einer Freundschaftsanfrage per Modal anzeigen\r\n  async openAddConnection() {\r\n    console.log('Data for componentProps: ', this.friendIds);\r\n    const modal = await this.modalCtrl.create({\r\n      component: AddConnectionModalPage,\r\n      componentProps: { friendIds: this.friendIds},\r\n      swipeToClose: true,\r\n      presentingElement: this.routerOutlet.nativeEl,\r\n      cssClass: 'transparent-modal'\r\n    });\r\n    modal.present();\r\n    const { data } =await modal.onDidDismiss();\r\n    if(data) {\r\n      console.log('modal connectionsPage did work:', data.user.id);\r\n      this.userService.requestConnection(data.user.id); //die id des anzufragenden Users\r\n    }                                                   // wird an die Funktion \"requestConnection()\" übergeben\r\n  }\r\n  confirmRequest() { \r\n    this.userService.addFriend(this.receivedRequestId); //hinkünftig connectionRequestId aus dem Array connectionRequests (collection 'user') filtern\r\n  }\r\n  declineRequest() {\r\n    this.userService.cleanConnectionRequests(this.receivedRequestId);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Auth, onAuthStateChanged } from '@angular/fire/auth';\r\nimport { \r\n  collection, \r\n  collectionData, \r\n  doc,\r\n  addDoc,\r\n  Firestore, \r\n  updateDoc, \r\n  docData, \r\n  query, \r\n  where,\r\n  orderBy,\r\n  serverTimestamp\r\n} from '@angular/fire/firestore';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { AuthService } from './auth.service';\r\n\r\nexport interface FriendConnections {\r\n  firendId: string;\r\n  connectionId: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class UserService {\r\n  logout$: Subject<boolean> = new Subject<boolean>();\r\n\r\n  constructor(\r\n    private firestore: Firestore,\r\n    private firebaseAuth: Auth,\r\n    private authService: AuthService    \r\n  ) {\r\n    onAuthStateChanged(this.firebaseAuth, user => {\r\n      if (!user) {\r\n        this.logout$.next(true);\r\n      }\r\n    })\r\n  }\r\n\r\n////// USER SECTION ///////////\r\n  getAllUsers() {\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const usersRef = collection(this.firestore, 'users');\r\n    return collectionData(usersRef, { idField: 'id' })\r\n    .pipe(\r\n      takeUntil(this.logout$), //returns Data until logout: Subject logout$ emits value\r\n      map(users => {           // in onAuthStateChanged(), incoked in constructor()\r\n        return users.filter(user => user.id != currentUserId);\r\n      })\r\n    );\r\n  }\r\n  getUserById(id) { //gibt einen einzigen user aus\r\n    const userRef = doc(this.firestore, `users/${id}`);\r\n    return docData(userRef);\r\n  }\r\n  getUsersByUserIds(ids: any) { //gibt einen array of users aus\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const usersRef = collection(this.firestore, 'users');\r\n    console.log('FRIENDS IDS?', ids);\r\n    return collectionData(usersRef, { idField: 'id' }).pipe(\r\n      map(users => {\r\n        //filtert die user aller connections des current users heraus zieht den current user davon ab:\r\n        return users.filter(user => ids.includes(user.id) && user.id != currentUserId);\r\n      })\r\n    )\r\n  }\r\n  getUsersExcludedByUserIds(ids: any) { //gibt einen array of users aus\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const usersRef = collection(this.firestore, 'users');\r\n    return collectionData(usersRef, { idField: 'id' }).pipe(\r\n      map(users => {\r\n        //filtert die user aller connections des current users heraus zieht den current user davon ab:\r\n        return users.filter(user => !ids.includes(user.id) && user.id != currentUserId);\r\n      })\r\n    );\r\n  } \r\n  getPublicTeachers() {\r\n    const usersRef = collection(this.firestore, 'users');\r\n    console.log('logout$: ', this.logout$);\r\n    return collectionData(usersRef, { idField: 'id' })\r\n    .pipe(\r\n      takeUntil(this.logout$), //returns Data until logout: Subject logout$ emits value\r\n      map(users => {           // in onAuthStateChanged(), incoked in constructor()\r\n        return users.filter(user => user.publicTeacher == true);\r\n      })\r\n    );\r\n  }\r\n\r\n//////// EDIT USER SECTION ////////////////\r\n  updateUser(id, name, aboutMe, country) { //called in update-profile-modal page\r\n    const userRef = doc(this.firestore, `users/${id}`);\r\n    updateDoc(userRef, {name: name, aboutMe: aboutMe, country: country});\r\n  }\r\n\r\n/////////CONNECTION SECTION//////////////\r\n  //Senden einer Freundschaftsanfrage:\r\n  getCurrentUserConnections() {\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const connectionsRef = collection(this.firestore, 'connections');\r\n    const q = query(connectionsRef, where ('users', 'array-contains', currentUserId));\r\n    return collectionData(q, {idField: 'id'});\r\n  }\r\n  getConnectionByFriendId(friendId: string) {\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const connectionsRef = collection(this.firestore, 'connections');\r\n    const q = query(connectionsRef, where ('users', 'array-contains', friendId));\r\n    return collectionData(q, { idField: 'id' }).pipe(\r\n      map(connections => {\r\n                //checken, ob groups wirklich ausgefiltert werden:\r\n        return connections.filter(connection => connection.users.includes(friendId) && connection.groupName == '');\r\n      })\r\n    );\r\n  }\r\n  requestConnection(requestedUserId) { //id = userId des angefragen Users\r\n    const userDocRef = doc(this.firestore, `users/${requestedUserId}`); //Referenz zum document des angefragten Users\r\n    const currentUserId = this.authService.getCurrentUserId(); //id des anfragenden Users (currentUserID)\r\n    const users = [requestedUserId, currentUserId];\r\n    for (let user of users) { //geht durch die User (userIds) im neuen connection-document\r\n      const userRef = doc(this.firestore, `users/${user}`); //referenziert die Collection 'users'\r\n      if(user == currentUserId) { //für den requesting user (currentUser);\r\n        updateDoc(userRef, {  \r\n          sentConnectionRequests: requestedUserId //muss später als Array behandelt werden: requestingUserId aus dem Array heraus nehmen!!\r\n        });\r\n      } else {                  //für den requested user (currentUser);\r\n        updateDoc(userRef, {\r\n          receivedConnectionRequests: currentUserId //muss später als Array behandelt werden: currentUserId aus dem Array heraus nehmen!!\r\n        });\r\n      }\r\n    }\r\n    return updateDoc(userDocRef, { connectionRequests: currentUserId }); //zu Array.push umwandeln\r\n  }\r\n  //Annehmen einer Freundschaftsanfrage:\r\n  async addFriend(requestingUserId) {\r\n    const currentUserId = this.authService.getCurrentUserId(); //id des requested users (currentUserId)\r\n    const connectionsRef = collection(this.firestore, 'connections'); //Referenz zur Collection 'Connections'\r\n    const users = [requestingUserId, currentUserId]; // Ids der requesting und requested User als Array-Variable 'users'\r\n    const promises = [];\r\n    return addDoc(connectionsRef, { \r\n        createdAt: serverTimestamp(), \r\n        groupName: '', \r\n        users }).then(res =>{ //erstellt eine neue Connection\r\n        for (let user of users) { //geht durch die User (userIds) im neuen connection-document\r\n          console.log('user of users: ', user);\r\n          const userRef = doc(this.firestore, `users/${user}`); //referenziert die Collection 'users'\r\n          if(user == currentUserId) { //für den requested user (currentUser);\r\n            updateDoc(userRef, {  \r\n              //friends: arrayUnion(requestingUserId), //fügt den requesting user zum Array-Feld 'friends' hinzu\r\n              receivedConnectionRequests: '' //muss später als Array behandelt werden: requestingUserId aus dem Array heraus nehmen!!\r\n            });\r\n          } else {                  //für den requesting user (currentUser);\r\n            updateDoc(userRef, {\r\n              //friends: arrayUnion(currentUserId), //fügt den requested user zum Array-Feld 'friends' hinzu\r\n              sentConnectionRequests: '' //muss später als Array behandelt werden: currentUserId aus dem Array heraus nehmen!!\r\n            });\r\n          }\r\n        }    \r\n      return Promise.all(promises);\r\n    });\r\n  }\r\n  //Ablehnen einer Freundschaftsanfrage:\r\n  cleanConnectionRequests(requestingUserId) {\r\n    const currentUserId = this.authService.getCurrentUserId(); //id des requested users (currentUserId)\r\n    const users = [requestingUserId, currentUserId]; // Ids der requesting und requested User als Array-Variable 'users'\r\n    for (let user of users) { //geht durch die User (userIds) im neuen connection-document\r\n      const userRef = doc(this.firestore, `users/${user}`); //referenziert die Collection 'users'\r\n      if(user == currentUserId) { //für den requested user (currentUser);\r\n        updateDoc(userRef, {  \r\n          receivedConnectionRequests: '' //muss später als Array behandelt werden: requestingUserId aus dem Array heraus nehmen!!\r\n        });\r\n      } else {                  //für den requesting user (currentUser);\r\n        updateDoc(userRef, {\r\n          sentConnectionRequests: '' //muss später als Array behandelt werden: currentUserId aus dem Array heraus nehmen!!\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n//////////////// CHAT SECTION //////////////////////\r\n  getConnectionInfo(connectionId) {\r\n    const connectionRef = doc(this.firestore, `connections/${connectionId}`);\r\n    return docData(connectionRef);\r\n  }\r\n  getChatMessages(connectionId) {\r\n    const messagesRef = collection(this.firestore, `connections/${connectionId}/messages`);\r\n    const q = query(messagesRef, orderBy('createdAt'));\r\n    return collectionData(q, { idField: 'id' });\r\n  }\r\n  addMessage(connectionId, msg) {\r\n    const userId = this.authService.getCurrentUserId();\r\n    const messagesRef = collection(this.firestore, `connections/${connectionId}/messages`);\r\n    return addDoc(messagesRef, {\r\n      from: userId,\r\n      msg,\r\n      createdAt: serverTimestamp()\r\n    }); \r\n  }\r\n}\r\n\r\n"],"names":[],"sourceRoot":"webpack:///"}