{"version":3,"file":"default-src_app_content_choose-teacher-modal_choose-teacher-modal_page_ts.js","mappings":"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","sources":["./src/app/content/choose-teacher-modal/choose-teacher-modal.page.ts","./src/app/services/lesson.service.ts","./src/app/services/user.service.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { ModalController, } from '@ionic/angular';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { LessonService } from 'src/app/services/lesson.service';\r\nimport { FriendConnections } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-choose-teacher-modal',\r\n  templateUrl: './choose-teacher-modal.page.html',\r\n  styleUrls: ['./choose-teacher-modal.page.scss'],\r\n})\r\nexport class ChooseTeacherModalPage implements OnInit {\r\n  @Input() title: string;\r\n  @Input() notes: string;\r\n  @Input() length: number;\r\n  @Input() videoLocalUrl: string;\r\n\r\n  friendIds = [];\r\n  friendConnections: FriendConnections;\r\n  friends = [];\r\n  groups = [];\r\n  publicTeachers = [];\r\n\r\n  selectedFriendId = '';\r\n  selectedFriendDisplayedString = '';\r\n  selectedFriendConnectionId = '';\r\n\r\n  selectedGroupId = ''; //TO DO  \r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private userService: UserService,\r\n    private lessonService: LessonService,\r\n    private modalCtrl: ModalController\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    ////getting friends via conections\r\n    this.getFriends(); //FÜHRT DIE FUNKTION AUS IRGENDEINEM GRUND ZWEI MAL AUS\r\n    /////                 SIEHE KONSOLE\r\n  }\r\n\r\n  getFriends() {\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    this.userService.getCurrentUserConnections().subscribe(res => { //lädt alle connections des current users\r\n      res.forEach(value => { //geht durch alle geladenen connections durch\r\n        if (value.groupName == '') {      //filtert alle groups weg, friendships bleiben übrig\r\n          const users = value.users;\r\n          console.log('INSIDE getFriends(): connection id', value.id, 'connection users: ', value.users)     \r\n          //holt sich die friend ids als Array:\r\n          users.forEach(id => {\r\n            this.friendIds.push(id);\r\n          });\r\n        }\r\n      });\r\n      this.userService.getUsersByUserIds(this.friendIds).subscribe(res => {\r\n        this.friends = res;\r\n        console.log('friends INSIDE getUsersByUserIds(this.friendIds): ', res); //CHECKEN WIE MAN DAS ASYNCHRON HINKRIEGT\r\n      });\r\n    })\r\n  }\r\n\r\n  //MODAL SECTION:\r\n  close() {\r\n    this.modalCtrl.dismiss();\r\n  }\r\n  \r\n  selectFriend() { //called by clicking button \"Ask friend for feedback\"\r\n    this.userService.getConnectionByFriendId(this.selectedFriendId).subscribe(res => {\r\n      console.log('Current info inside choose-teacher-modal', res);\r\n      res.forEach(value => this.selectedFriendConnectionId = value.id);\r\n      console.log('dummy addLesson with connectionId inside subscribe', this.selectedFriendConnectionId);\r\n    });\r\n\r\n\r\n   /* this.modalCtrl.dismiss({\r\n      user: { id: this.selectedUserId }\r\n    }); */\r\n  }\r\n  selectFriendName(friendName: string, friendEmail: string) {\r\n    console.log('friend name : ', friendName, 'friend email: ', friendEmail);\r\n    this.selectedFriendDisplayedString = friendName;\r\n    if(this.selectedFriendDisplayedString == '') {\r\n      this.selectedFriendDisplayedString = friendEmail;\r\n    }\r\n  }\r\n  friendChange(event: any) {\r\n    console.log(\"friendChange test\", event.detail.value);\r\n    this.selectedFriendId = event.detail.value;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { \r\n  collection, \r\n  collectionData, \r\n  doc,\r\n  addDoc,\r\n  Firestore, \r\n  updateDoc, \r\n  docData, \r\n  query, \r\n  where,\r\n  orderBy,\r\n  serverTimestamp\r\n} from '@angular/fire/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LessonService {\r\n\r\n  constructor(\r\n    private firestore: Firestore\r\n  ) { }\r\n\r\n  addLesson(videoId: string, connectionId: string) {\r\n    const lessonsRef = collection(this.firestore, 'lessons');\r\n    return addDoc(lessonsRef, {\r\n      createdAt: serverTimestamp(),\r\n      connectionId: connectionId,\r\n      status: 'requested',\r\n      videoId: videoId,\r\n      numberOfFeedbacks: 0\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Auth, onAuthStateChanged } from '@angular/fire/auth';\r\nimport { \r\n  collection, \r\n  collectionData, \r\n  doc,\r\n  addDoc,\r\n  Firestore, \r\n  updateDoc, \r\n  docData, \r\n  query, \r\n  where,\r\n  orderBy,\r\n  serverTimestamp\r\n} from '@angular/fire/firestore';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { AuthService } from './auth.service';\r\n\r\nexport interface FriendConnections {\r\n  firendId: string;\r\n  connectionId: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class UserService {\r\n  logout$: Subject<boolean> = new Subject<boolean>();\r\n\r\n  constructor(\r\n    private firestore: Firestore,\r\n    private firebaseAuth: Auth,\r\n    private authService: AuthService    \r\n  ) {\r\n    onAuthStateChanged(this.firebaseAuth, user => {\r\n      if (!user) {\r\n        this.logout$.next(true);\r\n      }\r\n    })\r\n  }\r\n\r\n////// USER SECTION ///////////\r\n  getAllUsers() {\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const usersRef = collection(this.firestore, 'users');\r\n    return collectionData(usersRef, { idField: 'id' })\r\n    .pipe(\r\n      takeUntil(this.logout$), //returns Data until logout: Subject logout$ emits value\r\n      map(users => {           // in onAuthStateChanged(), incoked in constructor()\r\n        return users.filter(user => user.id != currentUserId);\r\n      })\r\n    );\r\n  }\r\n  getUserById(id) { //gibt einen einzigen user aus\r\n    const userRef = doc(this.firestore, `users/${id}`);\r\n    return docData(userRef);\r\n  }\r\n  getUsersByUserIds(ids: any) { //gibt einen array of users aus\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const usersRef = collection(this.firestore, 'users');\r\n    console.log('FRIENDS IDS?', ids);\r\n    return collectionData(usersRef, { idField: 'id' }).pipe(\r\n      map(users => {\r\n        //filtert die user aller connections des current users heraus zieht den current user davon ab:\r\n        return users.filter(user => ids.includes(user.id) && user.id != currentUserId);\r\n      })\r\n    )\r\n  }\r\n  getUsersExcludedByUserIds(ids: any) { //gibt einen array of users aus\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const usersRef = collection(this.firestore, 'users');\r\n    return collectionData(usersRef, { idField: 'id' }).pipe(\r\n      map(users => {\r\n        //filtert die user aller connections des current users heraus zieht den current user davon ab:\r\n        return users.filter(user => !ids.includes(user.id) && user.id != currentUserId);\r\n      })\r\n    );\r\n  } \r\n  getPublicTeachers() {\r\n    const usersRef = collection(this.firestore, 'users');\r\n    console.log('logout$: ', this.logout$);\r\n    return collectionData(usersRef, { idField: 'id' })\r\n    .pipe(\r\n      takeUntil(this.logout$), //returns Data until logout: Subject logout$ emits value\r\n      map(users => {           // in onAuthStateChanged(), incoked in constructor()\r\n        return users.filter(user => user.publicTeacher == true);\r\n      })\r\n    );\r\n  }\r\n\r\n//////// EDIT USER SECTION ////////////////\r\n  updateUser(id, name, aboutMe, country) { //called in update-profile-modal page\r\n    const userRef = doc(this.firestore, `users/${id}`);\r\n    updateDoc(userRef, {name: name, aboutMe: aboutMe, country: country});\r\n  }\r\n\r\n/////////CONNECTION SECTION//////////////\r\n  //Senden einer Freundschaftsanfrage:\r\n  getCurrentUserConnections() {\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const connectionsRef = collection(this.firestore, 'connections');\r\n    const q = query(connectionsRef, where ('users', 'array-contains', currentUserId));\r\n    return collectionData(q, {idField: 'id'});\r\n  }\r\n  getConnectionByFriendId(friendId: string) {\r\n    const currentUserId = this.authService.getCurrentUserId();\r\n    const connectionsRef = collection(this.firestore, 'connections');\r\n    const q = query(connectionsRef, where ('users', 'array-contains', friendId));\r\n    return collectionData(q, { idField: 'id' }).pipe(\r\n      map(connections => {\r\n                //checken, ob groups wirklich ausgefiltert werden:\r\n        return connections.filter(connection => connection.users.includes(friendId) && connection.groupName == '');\r\n      })\r\n    );\r\n  }\r\n  requestConnection(requestedUserId) { //id = userId des angefragen Users\r\n    const userDocRef = doc(this.firestore, `users/${requestedUserId}`); //Referenz zum document des angefragten Users\r\n    const currentUserId = this.authService.getCurrentUserId(); //id des anfragenden Users (currentUserID)\r\n    const users = [requestedUserId, currentUserId];\r\n    for (let user of users) { //geht durch die User (userIds) im neuen connection-document\r\n      const userRef = doc(this.firestore, `users/${user}`); //referenziert die Collection 'users'\r\n      if(user == currentUserId) { //für den requesting user (currentUser);\r\n        updateDoc(userRef, {  \r\n          sentConnectionRequests: requestedUserId //muss später als Array behandelt werden: requestingUserId aus dem Array heraus nehmen!!\r\n        });\r\n      } else {                  //für den requested user (currentUser);\r\n        updateDoc(userRef, {\r\n          receivedConnectionRequests: currentUserId //muss später als Array behandelt werden: currentUserId aus dem Array heraus nehmen!!\r\n        });\r\n      }\r\n    }\r\n    return updateDoc(userDocRef, { connectionRequests: currentUserId }); //zu Array.push umwandeln\r\n  }\r\n  //Annehmen einer Freundschaftsanfrage:\r\n  async addFriend(requestingUserId) {\r\n    const currentUserId = this.authService.getCurrentUserId(); //id des requested users (currentUserId)\r\n    const connectionsRef = collection(this.firestore, 'connections'); //Referenz zur Collection 'Connections'\r\n    const users = [requestingUserId, currentUserId]; // Ids der requesting und requested User als Array-Variable 'users'\r\n    const promises = [];\r\n    return addDoc(connectionsRef, { \r\n        createdAt: serverTimestamp(), \r\n        groupName: '', \r\n        users }).then(res =>{ //erstellt eine neue Connection\r\n        for (let user of users) { //geht durch die User (userIds) im neuen connection-document\r\n          console.log('user of users: ', user);\r\n          const userRef = doc(this.firestore, `users/${user}`); //referenziert die Collection 'users'\r\n          if(user == currentUserId) { //für den requested user (currentUser);\r\n            updateDoc(userRef, {  \r\n              //friends: arrayUnion(requestingUserId), //fügt den requesting user zum Array-Feld 'friends' hinzu\r\n              receivedConnectionRequests: '' //muss später als Array behandelt werden: requestingUserId aus dem Array heraus nehmen!!\r\n            });\r\n          } else {                  //für den requesting user (currentUser);\r\n            updateDoc(userRef, {\r\n              //friends: arrayUnion(currentUserId), //fügt den requested user zum Array-Feld 'friends' hinzu\r\n              sentConnectionRequests: '' //muss später als Array behandelt werden: currentUserId aus dem Array heraus nehmen!!\r\n            });\r\n          }\r\n        }    \r\n      return Promise.all(promises);\r\n    });\r\n  }\r\n  //Ablehnen einer Freundschaftsanfrage:\r\n  cleanConnectionRequests(requestingUserId) {\r\n    const currentUserId = this.authService.getCurrentUserId(); //id des requested users (currentUserId)\r\n    const users = [requestingUserId, currentUserId]; // Ids der requesting und requested User als Array-Variable 'users'\r\n    for (let user of users) { //geht durch die User (userIds) im neuen connection-document\r\n      const userRef = doc(this.firestore, `users/${user}`); //referenziert die Collection 'users'\r\n      if(user == currentUserId) { //für den requested user (currentUser);\r\n        updateDoc(userRef, {  \r\n          receivedConnectionRequests: '' //muss später als Array behandelt werden: requestingUserId aus dem Array heraus nehmen!!\r\n        });\r\n      } else {                  //für den requesting user (currentUser);\r\n        updateDoc(userRef, {\r\n          sentConnectionRequests: '' //muss später als Array behandelt werden: currentUserId aus dem Array heraus nehmen!!\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n//////////////// CHAT SECTION //////////////////////\r\n  getConnectionInfo(connectionId) {\r\n    const connectionRef = doc(this.firestore, `connections/${connectionId}`);\r\n    return docData(connectionRef);\r\n  }\r\n  getChatMessages(connectionId) {\r\n    const messagesRef = collection(this.firestore, `connections/${connectionId}/messages`);\r\n    const q = query(messagesRef, orderBy('createdAt'));\r\n    return collectionData(q, { idField: 'id' });\r\n  }\r\n  addMessage(connectionId, msg) {\r\n    const userId = this.authService.getCurrentUserId();\r\n    const messagesRef = collection(this.firestore, `connections/${connectionId}/messages`);\r\n    return addDoc(messagesRef, {\r\n      from: userId,\r\n      msg,\r\n      createdAt: serverTimestamp()\r\n    }); \r\n  }\r\n}\r\n\r\n"],"names":[],"sourceRoot":"webpack:///"}